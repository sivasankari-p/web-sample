{"version":3,"sources":["constants/demo.ts","reducers/demoReducer.ts","reducers/index.ts","services/demo.ts","actions/demo.ts","saga/index.ts","store.ts","interceptors/index.ts","containers/RestaurantDetail/Rating.tsx","containers/RestaurantDetail/RestaurantHeader.tsx","containers/RestaurantDetail/index.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["FETCH_TODO","TODO_KEYS","initialState","loading","todo","error","combineReducers","state","action","type","response","length","DemoService","fetchTodos","axios","method","url","fetchTodoSuccess","fetchTodoError","console","log","call","put","data","takeLatest","middlewares","sagaMiddleware","createSagaMiddleware","push","enhancers","applyMiddleware","createStore","reducer","run","saga","Rating","props","color","value","className","style","borderColor","label","RestaurantHeader","useState","window","outerWidth","isWindowSmall","setWindowSmall","windowResize","useEffect","addEventListener","removeEventListener","Fragment","src","img","alt","restaurantName","location","onClick","rating","speed","flavor","offer","info","one","two","three","id","DETAIL","RestaurantDetail","isUserFavorite","baseUrl","process","BASE_URL","defaults","baseURL","headers","common","interceptors","request","use","config","Promise","reject","Error","status","setupInterceptors","App","store","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d8fd5ada.chunk.js","sourcesContent":["export const FETCH_TODO = \"FETCH_TODO\";\nexport const FETCH_TODO_SUCCESS = \"FETCH_TODO_SUCCESS\";\nexport const FETCH_TODO_ERROR = \"FETCH_TODO_ERROR\";\n","import {FETCH_TODO, FETCH_TODO_ERROR, FETCH_TODO_SUCCESS} from \"../constants/demo\";\n\nexport const TODO_KEYS = {\n    LOADING: \"loading\",\n    TODO_LIST: \"todo\",\n    ERROR: \"error\",\n};\n\n\nexport interface TodoStoreInterface {\n    loading: boolean,\n    todo: object[],\n    error: { [key: string]: any },\n}\n\n\nconst initialState: TodoStoreInterface = {\n    loading: false,\n    todo: [],\n    error: {},\n};\n\nexport default (state = initialState, action: any): TodoStoreInterface => {\n    switch (action.type) {\n        case FETCH_TODO:\n            return { ...state, [TODO_KEYS.LOADING]: true, [TODO_KEYS.TODO_LIST]: [] };\n        case FETCH_TODO_SUCCESS:\n            return { ...state, [TODO_KEYS.LOADING]: false, [TODO_KEYS.TODO_LIST]: action.response.length };\n        case FETCH_TODO_ERROR:\n            return { ...state, [TODO_KEYS.LOADING]: false, [TODO_KEYS.TODO_LIST]: [], [TODO_KEYS.ERROR]: action.error };\n        default:\n            return state;\n    }\n};\n","import { combineReducers } from \"redux\";\nimport demoReducer, { TodoStoreInterface, TODO_KEYS } from \"./demoReducer\";\n\nexport const STORE_KEYS = {\n  TODO_STORE: \"todoStore\",\n};\n\nexport interface StoreInterface {\n    todo: TodoStoreInterface,\n}\n\nexport {\n    TODO_KEYS,\n};\n\nexport default combineReducers({\n    [STORE_KEYS.TODO_STORE]: demoReducer,\n});\n\n\n\n","import axios from \"axios\";\n\nclass DemoService {\n    static fetchTodos = () => axios({\n        method: \"get\",\n        url: \"/todos\",\n    });\n}\n\nexport default DemoService;\n","import {FETCH_TODO, FETCH_TODO_ERROR, FETCH_TODO_SUCCESS} from \"../constants/demo\";\nimport {ActionInterface} from \"./action\";\n\nexport const fetchTodos = (count = 0): ActionInterface => ({\n    type: FETCH_TODO,\n    count,\n});\n\nexport const fetchTodoSuccess = (response: object): ActionInterface => ({\n    type: FETCH_TODO_SUCCESS,\n    response,\n});\n\nexport const fetchTodoError = (error: object): ActionInterface => ({\n    type: FETCH_TODO_ERROR,\n    error,\n});\n","import { takeLatest, put, call } from \"redux-saga/effects\";\nimport DemoService from \"../services/demo\";\nimport {FETCH_TODO} from \"../constants/demo\";\nimport {ActionInterface} from \"../actions/action\";\nimport {fetchTodoError, fetchTodoSuccess} from \"../actions/demo\";\n\nfunction* fetchTodos(action: ActionInterface) {\n    try {\n        console.log(\"FETCHING TODO_LIST :: \", action);\n        const response = yield call(DemoService.fetchTodos);\n        console.log(\"FETCHING RESPONSE :: \", response);\n        yield put(fetchTodoSuccess(response.data));\n    } catch (error) {\n        console.log({ error });\n        yield put(fetchTodoError(error));\n    }\n}\n\nexport default function* () {\n    yield takeLatest(FETCH_TODO, fetchTodos);\n}\n","import {applyMiddleware, createStore} from \"redux\";\nimport createSagaMiddleware from \"redux-saga\";\nimport reducer from \"./reducers\";\nimport saga from \"./saga\";\n\nconst middlewares = [];\nconst sagaMiddleware = createSagaMiddleware();\n\nmiddlewares.push(sagaMiddleware);\nconst enhancers = [];\nenhancers.push(applyMiddleware(...middlewares));\n\nexport default createStore(reducer, ...enhancers);\nsagaMiddleware.run(saga);\n","import axios from \"axios\";\n\nexport const setBaseUrl = (baseUrl: string) => {\n    axios.defaults.baseURL = baseUrl;\n};\n\nexport const setAuthToken = (token: string) => {\n    // axios.defaults.headers.common[TOKEN_KEY] = token;\n};\n\nexport const setupInterceptors = () => {\n    // @ts-ignore\n    setBaseUrl(process.env.BASE_URL);\n    axios.defaults.headers.common[\"Content-type\"] = \"application/json\";\n\n    // Add a request interceptor\n    axios.interceptors.request.use(\n        config => {\n            // Do something before request is sent\n            return config;\n        },\n        error => {\n            // Do something with request error\n            return Promise.reject(error);\n        }\n    );\n\n    // Add a response interceptor\n    axios.interceptors.response.use(\n        response => {\n            // If the login is failed then throw error\n            if (response.data.error) {\n                console.log(\"Login Failed \");\n                throw new Error(\"Login Failed \");\n            }\n\n            return response;\n        },\n        error => {\n            console.log(\"ERROR IN RESPONSE :: \", error.request.status, error);\n            if (error.request.status === 401) {\n                console.log(\"Token is invalid. Force logout the user\");\n                // Token is invalid. Force logout the user\n                /*store.dispatch({\n                    type: DELETE_TOKEN_FROM_PERSISTENCE,\n                });*/\n                return;\n            }\n            return Promise.reject(error);\n        }\n    );\n};\n","import React from \"react\";\n\ninterface IRatingProps {\n    label: string,\n    value: number\n}\n\nconst RATING_GOOD_AVG = 5;\nconst RATING_OKAY_AVG = 2;\n\nconst Rating = (props: IRatingProps) => {\n    const color = props.value > RATING_GOOD_AVG\n        ? \"green\"\n        : (\n            props.value > RATING_OKAY_AVG ? \"orange\" : \"red\"\n        );\n    return (\n        <div className={\"d-flex direction-col rating\"}>\n            <div style={{\n                borderColor: color,\n                color\n            }}>{props.value}</div>\n            <div>{props.label}</div>\n        </div>\n    )\n};\n\nexport default Rating;\n","import React, {useEffect, useState} from \"react\";\nimport Rating from \"./Rating\";\nimport \"./header.scss\";\n\ninterface IHeaderProps {\n    img: string,\n    restaurantName: string,\n    location: string,\n    rating: {\n        speed: number,\n        flavor: number,\n        offer: number\n    },\n    info: {\n        one: string,\n        two: string,\n        three: string\n    },\n    isUserFavorite: boolean\n}\n\nconst SPEED_LABEL = \"Speed\";\nconst FLAVOR_LABEL = \"Flavor\";\nconst OFFER_LABEL = \"Offer\";\n\nconst INFO_ONE = \"Info 1\";\nconst INFO_TWO = \"Info 2\";\nconst INFO_THREE = \"Info 3\";\n\nconst RestaurantHeader = (props: IHeaderProps) => {\n\n    const [ isWindowSmall, setWindowSmall ] = useState(window.outerWidth < 650);\n\n    function windowResize() {\n        if (window.outerWidth < 650 && !isWindowSmall) {\n            setWindowSmall(true);\n        } else if (window.outerWidth > 650 && isWindowSmall) {\n            setWindowSmall(false);\n        }\n    }\n\n    useEffect(() => {\n        window.addEventListener(\"resize\", windowResize);\n        return () => {\n            window.removeEventListener(\"resize\", windowResize);\n        }\n    });\n\n    return (\n        <React.Fragment>\n            <div className={\"d-flex-card\"}>\n                <img src={props.img} alt={props.restaurantName} />\n                <div className={\"flex-1 d-flex direction-col\"}>\n                    <div className={\"d-flex direction-row align-center justify-space-between\"}>\n                        <div className={\"header-container\"}>\n                            <div className={\"header\"}>{props.restaurantName}</div>\n                            <div className={\"subtitle\"}>{props.location}</div>\n                        </div>\n                        <div>\n                            <button onClick={() => {}}> Favorite </button>\n                            <button onClick={() => {}}> Share </button>\n                            <button onClick={() => {}}> Like </button>\n                        </div>\n                    </div>\n                    <div className={\"d-flex direction-row align-center\"}>\n                        <div className={\"d-flex direction-row align-center\"}>\n                            <Rating label={SPEED_LABEL} value={props.rating.speed}/>\n                            <Rating label={FLAVOR_LABEL} value={props.rating.flavor}/>\n                            <Rating label={OFFER_LABEL} value={props.rating.offer}/>\n                        </div>\n                        {!isWindowSmall && (\n                            <div className={\"d-flex direction-row align-center border-box\"}>\n                                <div>\n                                    <div>{props.info.one}</div>\n                                    <div>{INFO_ONE}</div>\n                                </div>\n                                <div>\n                                    <div>{props.info.two}</div>\n                                    <div>{INFO_TWO}</div>\n                                </div>\n                                <div>\n                                    <div>{props.info.three}</div>\n                                    <div>{INFO_THREE}</div>\n                                </div>\n                            </div>\n                        )}\n                    </div>\n                </div>\n            </div>\n            <div id={\"xs-border-box\"} className={\"d-flex direction-row align-center border-box\"}>\n                {isWindowSmall && (\n                    <React.Fragment>\n                        <div>\n                            <div>{props.info.one}</div>\n                            <div>{INFO_ONE}</div>\n                        </div>\n                        <div>\n                            <div>{props.info.two}</div>\n                            <div>{INFO_TWO}</div>\n                        </div>\n                        <div>\n                            <div>{props.info.three}</div>\n                            <div>{INFO_THREE}</div>\n                        </div>\n                    </React.Fragment>\n                )}\n            </div>\n        </React.Fragment>\n    )\n};\n\nexport default RestaurantHeader;\n","import React from \"react\";\nimport RestaurantHeader from \"./RestaurantHeader\";\nimport \"./detail.scss\";\n\ninterface IRestaurantProps {\n\n}\n\nconst DETAIL = {\n    img: \"https://www.qsrmagazine.com/sites/default/files/styles/story_page/public/PizzaHut.jpg?itok=8m3Mf8Bf\",\n    restaurantName: \"Pizza Hut\",\n    location: \"Chennai, India\",\n    rating: {\n        speed: 5,\n        flavor: 9,\n        offer: 10\n    },\n    info: {\n        one: \"25 TL\",\n        two: \"45 dk\",\n        three: \"09:00 - 22:00\"\n    }\n};\n\nconst RestaurantDetail = (props: IRestaurantProps) => {\n    return (\n        <div>\n            <RestaurantHeader\n                img={DETAIL.img}\n                restaurantName={DETAIL.restaurantName}\n                location={DETAIL.location}\n                rating={DETAIL.rating}\n                info={DETAIL.info}\n                isUserFavorite={true}\n            />\n        </div>\n    )\n};\n\nexport default RestaurantDetail;\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Routes from \"./Routes\";\nimport { Provider } from \"react-redux\";\nimport store from \"./store\";\nimport {setupInterceptors} from \"./interceptors\";\nimport RestaurantDetail from \"./containers/RestaurantDetail\";\nimport \"./css/font-awesome.min.css\";\n\nsetupInterceptors();\n\nconst App: React.FC = () => {\n  return (\n      <Provider store={store}>\n        <div className=\"App\">\n          {/*<header className=\"App-header\">\n            <img src={logo} className=\"App-logo\" alt=\"logo\" />\n            <p>\n              Edit <code>src/App.tsx</code> and save to reload.\n            </p>\n            <a\n              className=\"App-link\"\n              href=\"https://reactjs.org\"\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n              Learn React\n            </a>\n          </header>*/}\n          <RestaurantDetail />\n        </div>\n      </Provider>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}